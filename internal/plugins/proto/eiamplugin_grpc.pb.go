// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package __

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EIAMPluginClient is the client API for EIAMPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EIAMPluginClient interface {
	GetInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PluginInfo, error)
	Run(ctx context.Context, in *Args, opts ...grpc.CallOption) (*Empty, error)
}

type eIAMPluginClient struct {
	cc grpc.ClientConnInterface
}

func NewEIAMPluginClient(cc grpc.ClientConnInterface) EIAMPluginClient {
	return &eIAMPluginClient{cc}
}

func (c *eIAMPluginClient) GetInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PluginInfo, error) {
	out := new(PluginInfo)
	err := c.cc.Invoke(ctx, "/proto.EIAMPlugin/GetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eIAMPluginClient) Run(ctx context.Context, in *Args, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto.EIAMPlugin/Run", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EIAMPluginServer is the server API for EIAMPlugin service.
// All implementations must embed UnimplementedEIAMPluginServer
// for forward compatibility
type EIAMPluginServer interface {
	GetInfo(context.Context, *Empty) (*PluginInfo, error)
	Run(context.Context, *Args) (*Empty, error)
	mustEmbedUnimplementedEIAMPluginServer()
}

// UnimplementedEIAMPluginServer must be embedded to have forward compatible implementations.
type UnimplementedEIAMPluginServer struct{}

func (UnimplementedEIAMPluginServer) GetInfo(context.Context, *Empty) (*PluginInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}

func (UnimplementedEIAMPluginServer) Run(context.Context, *Args) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedEIAMPluginServer) mustEmbedUnimplementedEIAMPluginServer() {}

// UnsafeEIAMPluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EIAMPluginServer will
// result in compilation errors.
type UnsafeEIAMPluginServer interface {
	mustEmbedUnimplementedEIAMPluginServer()
}

func RegisterEIAMPluginServer(s grpc.ServiceRegistrar, srv EIAMPluginServer) {
	s.RegisterService(&EIAMPlugin_ServiceDesc, srv)
}

func _EIAMPlugin_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIAMPluginServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EIAMPlugin/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIAMPluginServer).GetInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EIAMPlugin_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIAMPluginServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EIAMPlugin/Run",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIAMPluginServer).Run(ctx, req.(*Args))
	}
	return interceptor(ctx, in, info, handler)
}

// EIAMPlugin_ServiceDesc is the grpc.ServiceDesc for EIAMPlugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EIAMPlugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.EIAMPlugin",
	HandlerType: (*EIAMPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInfo",
			Handler:    _EIAMPlugin_GetInfo_Handler,
		},
		{
			MethodName: "Run",
			Handler:    _EIAMPlugin_Run_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/plugins/proto/eiamplugin.proto",
}
